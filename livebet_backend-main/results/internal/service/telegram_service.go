package service

import (
	"fmt"
	"livebets/results/internal/api"
	"livebets/results/internal/entity"
	"log"
	"os"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramService handles bot communication
type TelegramService struct {
	bot               *tgbotapi.BotAPI
	betService        *BetService
	adminChatID       int64
	adminUsername     string
	chatID            int64
	isWaitingForMatch bool
	batchBets         []entity.LogBetAccept
	batchDate         string
	currentBetKey     string
	currentOutcome    string
	isTestBet         bool // —Ñ–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
}

func NewTelegramService(token string) (*TelegramService, error) {
	if token == "" {
		return nil, fmt.Errorf("telegram Bot API token is empty")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("error creating Telegram bot: %w", err)
	}

	// Set environment variables for admin chat ID and username
	adminChatIDStr := os.Getenv("TELEGRAM_ADMIN_CHAT_ID")
	adminUsername := os.Getenv("TELEGRAM_ADMIN_USERNAME")

	var adminChatID int64 = 0
	if adminChatIDStr != "" {
		adminChatID, err = strconv.ParseInt(adminChatIDStr, 10, 64)
		if err != nil {
			log.Printf("Warning: Cannot parse admin chat ID from environment: %v", err)
		}
	}

	service := &TelegramService{
		bot:           bot,
		adminChatID:   adminChatID,
		adminUsername: adminUsername,
	}

	return service, nil
}

func (s *TelegramService) SetBetService(betService *BetService) {
	s.betService = betService
}

func (s *TelegramService) SendMessage(text string) {
	if s.chatID == 0 {
		if s.adminChatID != 0 {
			s.chatID = s.adminChatID
		} else {
			log.Print("Warning: Cannot send message, no chat ID set")
			return
		}
	}

	msg := tgbotapi.NewMessage(s.chatID, text)
	_, err := s.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message to Telegram: %v", err)
	}
}

func (s *TelegramService) Start() {
	if s.bot == nil {
		log.Print("Error: Telegram bot is not initialized")
		return
	}

	log.Printf("Starting Telegram bot: @%s", s.bot.Self.UserName)

	// Set up update channel
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := s.bot.GetUpdatesChan(u)

	// Process updates
	go func() {
		for update := range updates {
			if update.Message == nil {
				continue
			}

			// Store the chat ID so we can reply to the same chat
			s.chatID = update.Message.Chat.ID
			log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s, user ID: %d, chat ID: %d",
				update.Message.From.UserName,
				update.Message.From.ID,
				update.Message.Chat.ID)

			// Check if the message is from an admin user (if configured)
			if s.adminUsername != "" && update.Message.From.UserName != s.adminUsername {
				s.SendMessage("Sorry, you are not authorized to use this bot.")
				continue
			}

			// Process the message
			s.processMessage(update.Message)
		}
	}()
}

func (s *TelegramService) processMessage(message *tgbotapi.Message) {
	log.Printf("–°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '%s'", message.Text)
	log.Printf("–°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: isWaitingForMatch=%v, currentBetKey=%s, currentOutcome=%s",
		s.isWaitingForMatch, s.currentBetKey, s.currentOutcome)

	// Process commands
	if message.IsCommand() {
		log.Printf("–°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: %s", message.Command())
		s.handleCommand(message.Command(), message.CommandArguments())
		return
	}

	// Default response for non-command messages
	log.Print("–°–£–ü–ï–†-–û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–µ –∫–æ–º–∞–Ω–¥–∞)")
	s.SendMessage("Please use one of the available commands. Type /help for more information.")
}

func (s *TelegramService) handleCommand(command string, args string) {
	switch command {
	case "start":
		s.handleStartCommand()
	case "help":
		s.handleHelpCommand()
	case "check_main":
		s.handleCheckMainResultsCommand()
	case "check_test":
		s.handleCheckTestResultsCommand()
	case "recalc":
		s.handleRecalcCommand()
	case "fix54321":
		s.handleFixCommand()
	default:
		s.SendMessage("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

func (s *TelegramService) handleStartCommand() {
	s.SendMessage("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Results! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
}

func (s *TelegramService) handleHelpCommand() {
	helpText := `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/check_main - –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
/check_test - –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫
/recalc - –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º —Å—Ç–∞–≤–∫–∞–º
`
	s.SendMessage(helpText)
}

func (s *TelegramService) handleFixCommand() {
	s.SendMessage("Fixing...")

	err := s.betService.Repo.FixTestDB()
	if err != nil {
		s.SendMessage(err.Error())
	} else {
		s.SendMessage("Fixed!")
	}
}

func (s *TelegramService) handleCheckMainResultsCommand() {
	if s.betService == nil {
		s.SendMessage("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å —Å—Ç–∞–≤–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫
	err := s.betService.ProcessRecentBets()
	if err != nil {
		log.Printf("Error processing main bets: %v", err)
		s.SendMessage(fmt.Sprintf("Error processing main bets: %v", err))
	} else {
		s.SendMessage("Main bets processing completed successfully.")
		s.betService.PinnacleService.ClearCached()
	}
}

func (s *TelegramService) handleCheckTestResultsCommand() {
	if s.betService == nil {
		s.SendMessage("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å —Å—Ç–∞–≤–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫
	err := s.betService.ProcessTestRecentBets()
	if err != nil {
		log.Printf("Error processing test bets: %v", err)
		s.SendMessage(fmt.Sprintf("Error processing test bets: %v", err))
	} else {
		s.SendMessage("Test bets processing completed successfully.")
		s.betService.PinnacleService.ClearCached()
	}
}

func (s *TelegramService) handleRecalcCommand() {
	rows, err := s.betService.Repo.GetTestBets()
	if err != nil {
		s.SendMessage(fmt.Sprintf("Error getting recalc bets: %v", err))
		return
	}

	s.SendMessage(fmt.Sprintf("Got %d test bets for statistic", len(rows)))

	table := api.ProcessTable(rows)

	err = api.SaveToCSV(table)
	if err != nil {
		s.SendMessage(fmt.Sprintf("Error saving recalc bets: %v", err))
	}

	s.SendMessage("File statistic.csv updated successfully.")
}
